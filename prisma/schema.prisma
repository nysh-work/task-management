// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
}

// NextAuth.js Account model for OAuth
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Task model
model Task {
  id                String    @id @default(cuid())
  title             String
  description       String?   @db.Text
  isCompleted       Boolean   @default(false)
  dueDate           DateTime?
  priority          String    @default("medium") // low, medium, high
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String

  // Locations for location-based reminders
  locations         Location[]
  
  // User relation
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Location model for location-based reminders
model Location {
  id                String   @id @default(cuid())
  name              String
  latitude          Float
  longitude         Float
  radius            Int      @default(100) // in meters
  notifyOnArrival   Boolean  @default(false)
  notifyOnDeparture Boolean  @default(false)
  reminderMessage   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  taskId            String

  // Task relation
  task              Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
